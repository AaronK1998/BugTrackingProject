<h3>Edit Bug Page</h3>
@page "/Bug/EditBug/{id:int}"
@using BugTrackingProject.Models
@using BugTrackingProject.Data
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject HttpClient Http
@inject IBugService bugService
@inject ApplicationDbContext _context
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


<div class="add-bug-form">
    <EditForm Model=@bug OnValidSubmit=@HandleValidSubmit>
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="bugHeading">Bug Title</label>
            <InputText id="bugHeading" class="form-control" @bind-Value="bug.BugHeading" />
        </div>

        <div class="form-group">
            <label for="productName">Product Name</label>
            <InputText id="productName" class="form-control" @bind-Value="bug.ProductName" />
        </div>

        <div class="form-group">
            <label for="component">Component</label>
            <InputText id="component" class="form-control" @bind-Value="bug.Component" />
        </div>

        <div class="form-group">
            <label for="loginName">User solving the bug</label>
            <InputSelect @bind-Value="bug.LoginName" class="form-control">
                <option value="">Select User to solve the bug</option>
                @foreach (var user in ColUsers)
                {
                    <option value="@user.UserName"> @user.UserName </option>
                }
            </InputSelect>
        </div>


        <div class="form-group">
            <label for="status">Status</label>
            <InputSelect class="form-control" @bind-Value="bug.Status">
                <option value="Open">Open</option>
                <option value="Work in Progress">Work in Progress</option>
                <option value="Testing">Testing</option>
                <option value="Resolved">Resolved</option>
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="BugDescription"> Bug Description</label>
            <InputTextArea id="BugDescription" class="form-control" @bind-Value="bug.BugDesciption" />
        </div>

        <div class="form-group">
            <label for="SecondaryStatus">Secondary Status</label>
            <InputSelect class="form-control" @bind-Value="bug.SecondaryStatus">
                @if (bug.Status == "Work in Progress")
                {
                    <option value="Waiting for more information from business unit">Waiting for more information from business unit</option>
                    <option value="Gathering Requirements">Gathering Requirements</option>
                    <option value="Being Fixed">Being Fixed</option>
                    <option value="Extra Help Required!">Extra Help Required!</option>
                    <option value="Bug Found..Fixing new bug">Bug Found..Fixing new bug</option>
                }
                @if (bug.Status == "Testing")
                {
                    <option value="Being Tested In Dev Environment">Being Tested In Dev Environment</option>
                    <option value="Being Tested On UAT">Being Tested On UAT</option>
                    <option value="Tested successfully and waiting to be released">Tested successfully and waiting to be released</option>
                }
                @if (bug.Status == "Resolved")
                {
                    <option value="Fixed">Fixed</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="Importance">Importance</label>
            <InputSelect class="form-control" @bind-Value="bug.Importance">
                <option value="Low">Low</option>
                <option value="Medium">Medium</option>
                <option value="High">High</option>
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="EstimatedTimeTaken">Estimated Time Taken</label>
            <InputNumber id="EstimatedTimeTaken" min="0" max="1000" class="form-control" @bind-Value="bug.EstimateTimeTaken" />
        </div>


        <div class="form-group">
            <label for="TotalEstimatedTimeTaken">Total Esitmated Time Taken</label>
            <InputNumber id="TotalEstimatedTimeTaken" readonly="true" class="form-control" @bind-Value="bug.TotalEstimatedTimeTaken" />
        </div>

        <div class="form-group">
            <label for="ActualTimeTaken">Actual Time Taken</label>
            <InputNumber id="ActualTimeTaken" min="0" max="1000" class="form-control" @bind-Value="bug.ActualTimeTaken" />
        </div>

        <div class="form-group">
            <label for="TotalTimeTaken">Total Time Taken</label>
            <InputNumber readonly="true" id="ActualTimeTaken" class="form-control" minValue=0 @bind-Value="bug.TotalTimeTaken" />
        </div>

        <button class="btn btn-primary" type="submit">Save Bug</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public int id { get; set; }

    public Bug bug = new Bug();
    List<IdentityUser> ColUsers = new List<IdentityUser>();

    protected override async Task OnInitializedAsync()
    {
        bug = await Task.Run(() => bugService.GetBugData(id));
        GetUsers();
    }


    public void GetUsers()
    {

        // Collection to hold users
        ColUsers = new List<IdentityUser>();
        // get users from _UserManager
        var user = _UserManager.Users.Select(x => new IdentityUser
            {
                UserName = x.UserName,
            });
        foreach (var item in user)
        {
            ColUsers.Add(item);
        }
    }



    public async void HandleValidSubmit()
    {
        try
        {
            AddTimeTaken();
            AddEstimateTimeTaken();
            bug.LastUpdated = DateTime.Now;
            _context.Bugs.Update(bug);
            await _context.SaveChangesAsync();
        }
        catch
        {
            base.StateHasChanged();
        }
        base.StateHasChanged();
        navigationManager.NavigateTo("/Bug/BugDescriptionPage/" + bug.Id);
    }

    public void AddTimeTaken()
    {
        if (string.IsNullOrEmpty(Convert.ToString(bug.TotalTimeTaken)))
        {
            bug.TotalTimeTaken = 0;
        }
        else if (bug.ActualTimeTaken != null && bug.TotalTimeTaken != null)
        {
            bug.TotalTimeTaken += bug.ActualTimeTaken;
        }
        else if (bug.ActualTimeTaken == null && bug.TotalTimeTaken == null)
        {
            bug.TotalTimeTaken = 0;
        }
        else
        {
            bug.TotalTimeTaken = 0;
        }
    }

    public void AddEstimateTimeTaken()
    {
        if (string.IsNullOrEmpty(Convert.ToString(bug.TotalEstimatedTimeTaken)))
        {
            bug.TotalEstimatedTimeTaken = 0;
        }
        else if (bug.EstimateTimeTaken != null && bug.TotalEstimatedTimeTaken != null)
        {
            bug.TotalEstimatedTimeTaken += bug.EstimateTimeTaken;
        }
        else if (bug.EstimateTimeTaken == null && bug.TotalEstimatedTimeTaken == null)
        {
            bug.TotalEstimatedTimeTaken = 0;
        }
        else
        {
            bug.TotalEstimatedTimeTaken = 0;
        }
    }
}

